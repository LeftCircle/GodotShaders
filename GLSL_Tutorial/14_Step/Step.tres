[gd_resource type="Shader" format=2]

[resource]
code = "// BUILT-IN FUNCTIONS: STEP
//
// \"step\" function is the Heaviside step function :-)
// http://en.wikipedia.org/wiki/Heaviside_step_function
// 
// f(x0, x) = {1 x>x0, 
//            {0 x<x0
shader_type canvas_item;

// the size of the Color Rect
uniform vec2 iResolution = vec2(120, 80);

void disk(vec2 r, vec2 center, float radius, vec3 color, inout vec3 pixel){
	if (length(r-center) < radius){
		pixel = color;
	}
}

void fragment(){
	vec2 r = 2.0 * vec2(UV * iResolution - 0.5 * iResolution) / iResolution.y;
	
	float xMax = iResolution.x / iResolution.y;
	
	vec3 bgCol = vec3(0.0);
	vec3 col1 = vec3(0.216, 0.471, 0.698);
	vec3 col2 = vec3(1.00, 0.329, 0.298);
	vec3 col3 = vec3(0.867, 0.910, 0.247);

	vec3 pixel = bgCol;

	float edge, variable, ret;

	// divide the screen into five parts horizontally
	// for different examples
	if (r.x < -0.6 * xMax){ // Part I
		variable = r.y;
		edge = 0.2;
		ret = float(variable > edge);
//		if (variable > edge){
//			ret = 1.0;
//		} else {
//			ret = 0.0;
//		}
	} else if (r.x < -0.2 * xMax){ // Part II
		variable = r.y;
		edge = -0.2;
		ret = step(edge, variable) // this is the same as part I
	}
	else if (r.x < 0.2 * xMax){ // Part III
		ret = 1.0 - step(0.5, r.y)
	}
	else if (r.x < 0.6 * xMax){ // Part IV
		// if the y coordinate is smaller than -0.4, ret is 0.3
		// if the y coordinate is greater than -0.4, ret is 0.3 + 0.5 = 0.8
		ret = 0.3 + 0.5 * step(-0.4, r.y);
	}
	else{ // Part V
		// Combine two step functions to create a gap
		ret = step(-0.3, r.y) * (1.0 - step(0.2, r.y)); 
	}
	
	pixel = vec3(ret);
	
	COLOR = vec4(pixel, 1.0);
}"
