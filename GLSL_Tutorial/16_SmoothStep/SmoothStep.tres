[gd_resource type="Shader" format=2]

[resource]
code = "// BUILT-IN FUNCTIONS: SMOOTHSTEP
//
// \"smoothstep\" function is like step function but instead of a
// sudden jump from 0 to 1 at the edge, it makes a smooth transition
// in a given interval
// http://en.wikipedia.org/wiki/Smoothstep
shader_type canvas_item;
uniform vec2 iResolution = vec2(120, 80);

void fragment() {
	//vec2 r =  2.0*vec2(UV * iResolution - 0.5*iResolution.xy)/iResolution.y;
	//vec2 p = vec2(UV * iResolution / iResolution.xy);
	vec2 p = UV;
	// use [0,1] coordinate system for this example
	
	vec3 bgCol = vec3(0.0); // black
	vec3 col1 = vec3(0.216, 0.471, 0.698); // blue
	vec3 col2 = vec3(1.00, 0.329, 0.298); // red
	vec3 col3 = vec3(0.867, 0.910, 0.247); // yellow

	vec3 pixel = bgCol;
	
	float edge, variable, ret;
	
	// divide the screen into four parts horizontally for different
	// examples
	if(p.x < 1.0 / 5.0) { // Part I
		edge = 0.5;
		ret = step(edge, p.y); // simple step function
	} 
	else if(p.x < 2./5.) { // Part II
		// linearstep (not a builtin function)
		float edge0 = 0.15;
		float edge1 = 0.85;
		float t = (p.y - edge0)/(edge1 - edge0);
		// when p.y == edge0 => t = 0.0
		// when p.y == edge1 => t = 1.0
		// RHS is a linear function of y
		// so, between edge0 and edge1, t has a linear transition
		// between 0.0 and 1.0
		float t1 = clamp(t, 0.0, 1.0);
		// t will have negative values when t<edge0 and
		// t will have greater than 1.0 values when t>edge1
		// but we want it be constraint between 0.0 and 1.0
		// so, clamp it!
		ret = t1;
	} 
	else if(p.x < 3./5.) { // Part III
		// implementation of smoothstep
		float edge0 = 0.15;
		float edge1 = 0.85;
		float t = clamp((p.y - edge0)/(edge1 - edge0), 0.0, 1.0);
		float t1 = 3.0*t*t - 2.0*t*t*t;
		// previous interpolation was linear. Visually it does not
		// give an appealing, smooth transition.
		// To achieve smoothness, implement a cubic Hermite polynomial
		// 3*t^2 - 2*t^3
		ret = t1;
	}
	else if(p.x < 4./5.) { // Part IV
		ret = smoothstep(0.15, 0.85, p.y);
	}
	else if(p.x < 5./5.) { // Part V
		// smootherstep, a suggestion by Ken Perlin
		float edge0 = 0.15;
		float edge1 = 0.85;
		float t = clamp((p.y - edge0)/(edge1 - edge0), 0.0, 1.0);		
		// 6*t^5 - 15*t^4 + 10*t^3
		float t1 = t*t*t*(t*(t*6. - 15.) + 10.);
		ret = t1;
		// faster transition and still smoother
		// but computationally more involved.
	}	
		
	pixel = vec3(ret); // make a color out of return value.
	COLOR = vec4(pixel, 1.0);
}
"
