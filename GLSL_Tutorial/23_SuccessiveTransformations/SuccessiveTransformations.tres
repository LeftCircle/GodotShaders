[gd_resource type="Shader" format=2]

[resource]
code = "// SUCCESSIVE COORDINATE TRANSFORMATIONS
//
// Drawing a shape on the desired location, with desired size, and
// desired orientation needs mastery of succesive application of
// transformations.
//
// In general, transformations do not commute. Which means that
// if you change their order, you get different results.
//
// Let's try application of transformations in different orders.
shader_type canvas_item;
uniform vec2 iResolution = vec2(120.0, 80.0);

float coordinateGrid(vec2 r) {
	vec3 axesCol = vec3(0.0, 0.0, 1.0);
	vec3 gridCol = vec3(0.5);
	float ret = 0.0;
	
	// Draw grid lines
	const float tickWidth = 0.1;
	for(float i=-2.0; i<2.0; i+=tickWidth) {
		// \"i\" is the line coordinate.
		ret += 1.-smoothstep(0.0, 0.008, abs(r.x-i));
		ret += 1.-smoothstep(0.0, 0.008, abs(r.y-i));
	}
	// Draw the axes
	ret += 1.-smoothstep(0.001, 0.015, abs(r.x));
	ret += 1.-smoothstep(0.001, 0.015, abs(r.y));
	return ret;
}
// returns 1.0 if inside circle
float disk(vec2 r, vec2 center, float radius) {
	return 1.0 - smoothstep( radius-0.005, radius+0.005, length(r-center));
}
// returns 1.0 if inside the disk
float rectangle(vec2 r, vec2 topLeft, vec2 bottomRight) {
	float ret;
	float d = 0.005;
	ret = smoothstep(topLeft.x-d, topLeft.x+d, r.x);
	ret *= smoothstep(topLeft.y-d, topLeft.y+d, r.y);
	ret *= 1.0 - smoothstep(bottomRight.y-d, bottomRight.y+d, r.y);
	ret *= 1.0 - smoothstep(bottomRight.x-d, bottomRight.x+d, r.x);
	return ret;
}

void fragment() {
	vec2 p = UV;
	vec2 r =  2.0*vec2(UV * iResolution - 0.5*iResolution.xy)/iResolution.y;
	float xMax = iResolution.x/iResolution.y;	
//	vec2 p = vec2(fragCoord.xy / iResolution.xy);
//	vec2 r =  2.0*vec2(fragCoord.xy - 0.5*iResolution.xy)/iResolution.y;
//	float xMax = iResolution.x/iResolution.y;
	
	vec3 bgCol = vec3(1.0);
	vec3 col1 = vec3(0.216, 0.471, 0.698); // blue
	vec3 col2 = vec3(1.00, 0.329, 0.298); // yellow
	vec3 col3 = vec3(0.867, 0.910, 0.247); // red
		
	vec3 ret = bgCol;

	float angle = 0.6;
	mat2 rotationMatrix = mat2(vec2(cos(angle), -sin(angle)),
                               vec2(sin(angle),  cos(angle)));
//	mat2 rotationMatrix = mat2(cos(angle), -sin(angle),
//                               sin(angle),  cos(angle));
	if(p.x < 1./2.) { // Part I
		// put the origin at the center of Part I
		r = r - vec2(-xMax/2.0, 0.0); 

		vec2 rotated = rotationMatrix*r;
		vec2 rotatedTranslated = rotated - vec2(0.4, 0.5);
		ret = mix(ret, col1, coordinateGrid(r)*0.3);
		ret = mix(ret, col2, coordinateGrid(rotated)*0.3);
		ret = mix(ret, col3, coordinateGrid(rotatedTranslated)*0.3);

		ret = mix(ret, col1, rectangle(r, vec2(-.1, -.2), vec2(0.1, 0.2)) );
		ret = mix(ret, col2, rectangle(rotated, vec2(-.1, -.2), vec2(0.1, 0.2)) );
		ret = mix(ret, col3, rectangle(rotatedTranslated, vec2(-.1, -.2), vec2(0.1, 0.2)) );
	} 
	else if(p.x < 2./2.) { // Part II
		r = r - vec2(xMax*0.5, 0.0); 

		vec2 translated = r - vec2(0.4, 0.5);
		vec2 translatedRotated = rotationMatrix*translated;
		
		ret = mix(ret, col1, coordinateGrid(r)*0.3);
		ret = mix(ret, col2, coordinateGrid(translated)*0.3);
		ret = mix(ret, col3, coordinateGrid(translatedRotated)*0.3);

		ret = mix(ret, col1, rectangle(r, vec2(-.1, -.2), vec2(0.1, 0.2)) );
		ret = mix(ret, col2, rectangle(translated, vec2(-.1, -.2), vec2(0.1, 0.2)) );
		ret = mix(ret, col3, rectangle(translatedRotated, vec2(-.1, -.2), vec2(0.1, 0.2)) );		
	} 	
	
	vec3 pixel = ret;
	COLOR = vec4(pixel, 1.0);
}

"
